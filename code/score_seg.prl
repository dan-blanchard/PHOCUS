#!/usr/bin/perl -w
use Getopt::Std;
use strict;
use vars qw($opt_v);

# (c) Sharon Goldwater, June 2008

# This program may be used freely for research purposes.  Please
# acknowledge the author in any publications containing results
# produced by this program or code derived from this program.

my $usage = "$0 [-v <level>] <true_seg> <found_seg(s)>
Calculates precision/recall for found_seg relative to true_seg.
Each file should be a segmentation with spaces indicating word boundaries.
Found_seg may contain multiple segmentations, separated by a blank line.
(found_seg may also be the full output file from dpseg.)
-v1 also prints summary information on types of errors (collocations, etc.)
-v2 also prints lists of lexical items and collocations found.\n";

# Default behavior of this script prints out only precision, recall, and
# f-score for each found segmentation provided as input, computed by
# comparing with the true segmentation.  In verbose mode it also prints
# out statistics on errors.  Example:

# Collocations found:
# 		Types		Tokens
# 1-word:		724 (62.3%)	23249 (75.2%)
# 2-word:		159 (13.7%)	3570 (11.5%)
# 3-word:		12 (1.0%)	143 (0.5%)
# 4-word:		1 (0.1%)	1 (0.0%)
# -------------------------------------------------
# >1-word:	172 (14.8%)	3714 (12.0%)

# Placement err:	0 (0.0%)	1465 (4.7%)
# Coll place err:	0 (0.0%)	53 (0.2%)
# Incorrect:	261 (22.5%)	2433 (7.9%)

# 1-word "collocations" are in fact correctly found single words.
# Placement errors are found words that occur in the true lexicon, but
# not in the locations they were found in.  Collocation placement errors
# are found words that consist of multiple true words, but where the
# boundaries don't line up with true boundaries.  (Note that these are
# identified by checking against the list of collocations found by the
# system, not by looking for possible combinations of true lexical
# items.  Thus it is possible that a small number of collocation
# placement errors are not identified.) "Incorrect" are any remaining
# errors.  Token counts for all these are found straightforwardly by
# comparing segmentations directly.  Type counts are found as follows:

# -- Any correctly found token contributes to the type counts for
# correctly found types (1-word collocations).

# -- Other collocation tokens contribute to the type counts for
# multi-word collocations, except for a few compounds that have
# inconsistent segmentation in the gold standard so that there is a word
# in the true lexicon corresponding to the collocation (e.g., hairbrush,
# sometimes segmented as hair brush).  If the compound is listed in the
# lexicon, it is counted towards the type counts of 1-word collocations.

# -- All placement errors and collocation placement errors have zero
# type counts because their types are found in the true lexicon (or as
# collocations), and are therefore counted as correct types or
# multi-word collocation types.  Note that some placement errors consist
# of words from the true lexicon that were never found in their correct
# locations, so placement errors can increase the number of correctly
# found types.

# -- All remaining types are listed as incorrect.

getopts('v:');
die $usage unless ($#ARGV > 0);
my $true_file = shift;
my $verbose = 0 || $opt_v;

my ($words_correct, $found_words, $true_words,
    $bs_correct, $found_bs, $true_bs, $total_chars);
my %true_lex;
my %found_lex;
my %simple; #token counts of words found correctly
my %complex; #token counts of collocations found; keys have spaces at true boundaries
my %complex_no_spaces; #found forms of collocations; keys have no spaces.
my %placement_errors; #counts of correct words found incorrectly
my %incorrect; #counts of words not in the correct lexicon

#read in lexicon from true segmentation
open TRUE, $true_file or die "couldn't open $true_file\n";
while (my $true = <TRUE>) {
  chomp $true;
  add_words_to_lex($true,\%true_lex);
}
close TRUE;

while (my $found_file = shift) {
  my $full_output_file = 0;	#flag: do we have full output file from dpseg or only segmentation?
  open FOUND, $found_file or die "couldn't open $found_file\n";
  print "Results for $found_file:\n";
  my $found  = <FOUND>;
  #if this is a full output file, read until we get to segmentation
  if ($found =~ /^(Segmenting|init)/) {
    $full_output_file = 1;
    while (defined($found =<FOUND>) and not $found =~ /State:/) {}
    $found =<FOUND>;
    die "Didn't find segmentation in $found_file\n" unless $found;
  }
  my $nresults = 0;		#number of segmentations in results file
  while ($found) {
    $nresults++;
    open TRUE, $true_file or die "couldn't open $true_file\n";
    print STDERR ".";
    initialize_counts();
    while (my $true = <TRUE>) {
      die "found_seg is shorter than true_seg\n" unless (defined($found) and $found);
      chomp $true;
      chomp $found;
      add_words_to_lex($found,\%found_lex);
      score_utterance($true, $found);
      #  print "$true_words, $found_words\n";
      $found = <FOUND>;
    }
    if ($found) {
      if ($full_output_file) {
	die "found_seg is longer than true_seg\n" unless $found =~ /nstrings/ or $found eq "\n";
	while (defined($found =<FOUND>)) {}
      }
      else {
	if ($found eq "\n") {#multiple segmentations infile
	  $found = <FOUND>; #ready for next loop
	}
	else {
	  die "found_seg is longer than true_seg\n";
	}
      }
    }
    my ($p, $r, $f, $lp, $lr, $lf, $bp, $br, $bf) =
      compute_scores($words_correct, $found_words, $true_words,
		     $bs_correct, $found_bs, $true_bs);
    printf "P %1.2f R %1.2f F %1.2f BP %1.2f BR %1.2f BF %1.2f LP %1.2f LR %1.2f LF %1.2f \n",
      $p*100, $r*100, $f*100, $bp*100, $br*100, $bf*100, $lp*100, $lr*100, $lf*100;
    my $true_length = $total_chars/$true_words;
    my $found_length = $total_chars/$found_words;
    #print "$total_chars\n";
    printf "Avg word length: %1.2f (true), %1.2f (found)\n",
      $true_length, $found_length;
    close TRUE;
    print_collocations() if $verbose;
  }
  print "($nresults segmentations found)\n" if $nresults > 1;
  close FOUND;
}

sub initialize_counts {
    $words_correct = 0;
    $found_words = 0;
    $true_words = 0;
    $bs_correct = 0;
    $found_bs = 0;
    $true_bs = 0;
    $total_chars = 0;
    %found_lex = ();
    %simple = ();
    %complex = ();
    %complex_no_spaces = ();
    %placement_errors = ();
    %incorrect = ();
}

sub compute_scores {
  my ($words_correct, $found_words, $true_words, $bs_correct, $found_bs, $true_bs) = @_;
  my ($lp, $lr) = score_lexicon(\%true_lex, \%found_lex);
  my $lf = fmeas($lp,$lr);
  my $p = $words_correct/$found_words;
  my $r = $words_correct/$true_words;
  my $f = fmeas($p,$r);
  my $bp = $bs_correct/$found_bs;
  my $br = $bs_correct/$true_bs;
  my $bf = fmeas($bp,$br);
  return ($p, $r, $f, $lp, $lr, $lf, $bp, $br, $bf);
}

sub fmeas {
  my ($p, $r) = @_;
  return 2*$p*$r/($p+ $r);
}


sub add_words_to_lex {
  my ($utt, $lexicon) = @_;
  my @words = split / /, $utt;
  for my $word (@words) {
    $$lexicon{$word}++;
  }
}

#$true: true lexicon
#$found: found lexicon
#returns (lexicon precision, lexicon recall)
sub score_lexicon {
  my ($true, $found) = @_;
  my $correct = 0;
  for my $item (keys %$found) {
    $correct++ if exists($$true{$item});
  }
  return ($correct/scalar(keys(%$found)),
	  $correct/scalar(keys(%$true)));
}

#we iterate through the utterance pair by characters.
#when boundaries match, we set left_match to 1.
#if left_match is already 1, we got the word right.
#to look for collocations, we also look for true
#boundaries intervening between two matches.
#This function fills in %simple, %complex,
#%complex_no_spaces, %placement_errors,
#and %incorrect with counts of correctly found words,
#found collocations (with and without spaces),
# correct words found in the wrong places,
#and other incorrect words.  we will check for collocation
#placement errors in %incorrect later.
sub score_utterance {
  my ($true, $found) = @_;
  my @true = split(//, $true);
  my @found = split(//, $found);
  push @true, ' ' if ($true[$#true] ne ' ');
  push @found, ' ' if ($found[$#found] ne ' ');
  $total_chars += $#true + 1; #but we have to subtract spaces
  my ($t,$f) = (0,0);
  my $left_match = 1;
  my $is_complex = 0;
  my $found_word = "";
  my $with_spaces = "";
  while ($f <= $#found) {
    die "utterances do not match:\n$true\n$found\n" if $t > $#true;
    if (($found[$f] eq ' ') and ($true[$t] eq ' ')) {
      my $with_spaces = $found_word;
      $found_word =~ s/ //g;
      die "$found_word not found\n" unless exists $found_lex{$found_word};
      $total_chars--;
      if ($left_match) {
	$words_correct++;
	$simple{$found_word}++;
      }
      elsif ($is_complex) {
	$complex{$with_spaces}++;
	$complex_no_spaces{$found_word}++;
      }
      elsif (exists($true_lex{$found_word})) {
	$placement_errors{$found_word}++;
      }
      else {
	$incorrect{$found_word}++;
      }
      $bs_correct++;
      $true_bs++;
      $found_bs++;
      $found_words++;
      $true_words++;
      $left_match = 1;
      $is_complex = 0;
      $found_word = "";
      $t++;
      $f++;
    }
    elsif ($found[$f] eq ' ') {
      $found_word =~ s/ //g;
      die "$found_word not found\n" unless exists $found_lex{$found_word};
      if (exists($true_lex{$found_word})) {
	$placement_errors{$found_word}++;
      }
      #note: includes collocations found in incorrect locations
      #e.g., 'yuwant' segmented from 'yu want6d'.  We check
      #for these later.
      else { 
	$incorrect{$found_word}++ ;
      }
      $found_bs++;
      $found_words++;
      $left_match = 0;
      $is_complex = 0;
      $found_word = "";
      $f++;
    }
    elsif ($true[$t] eq ' ') {
      #provisionally, a collocation.
      $is_complex = 1 if $left_match or $is_complex;
      $total_chars--;
      $true_bs++;
      $true_words++;
      $left_match = 0;
      $found_word = $found_word." ";
      $t++;
    }
    else {
      $found_word = $found_word.$found[$f];
      $t++;
      $f++;
    }
  }
  die "utterances do not match:\n$true\n$found\n" if $t < $#true;
  #subtract final utterance boundary
  $bs_correct--;
  $true_bs--;
  $found_bs--;
}


#we use the global counts of simple words, complex words,
#placement errors, and incorrect words found in
#score_utterance above.  We divide incorrect words into
#completely incorrect, and those that are collocations but
#in the wrong place, e.g., 'yuwant' segmented from 'yuwant6d'.
#This is done by looking up incorrect words in the list of
#found collocations, which theoretically means we could miss
#some true collocs, but I assume these kinds of errors only 
#occur because of repeating frequently found sequences.
#note that %complex contains words with spaces
#indicating where there was a true boundary.
sub print_collocations {
  #position i stores number of found types/tokens
  #that are collocations with i words
  my @types = (0) x 10;
  my @tokens = (0) x 10;
  my ($simple_types, $simple_tokens) = (0, 0);
  my ($complex_types, $complex_tokens) = (0, 0);
  my ($placement_types, $placement_tokens) = (0, 0); #placement errors
  my ($incorrect_types, $incorrect_tokens) = (0, 0); #other errors
  my ($complex_placement_types, $complex_placement_tokens) = (0, 0);
  my $count;
  #first process placement errors, because these can increase
  #the number of simple types.
  for my $key (keys %placement_errors) {
    $count = $placement_errors{$key};
    $placement_tokens += $count;
    #this could be a real word we never actually found
    if (!exists $simple{$key}) {
      $simple_types++;
    }
  }
  #process incorrect words.  Sort out the ones that are
  #collocation placement errors.
  my %temp;
  @temp{keys %incorrect} = values %incorrect;
  %incorrect = ();
  for my $key (keys %temp) {
    $count = $temp{$key};
    if (exists($complex_no_spaces{$key})) {
      $complex_placement_tokens += $count;
    }
    else {
      $incorrect{$key} += $count;
      $incorrect_tokens += $count;
      $incorrect_types++;
    }
  }
  #print simple words
  printf "%-15s %4s %4s\n", "Simple:","Seg", "True" if $verbose > 1;
  for my $key (reverse sort {$simple{$a} <=> $simple{$b}}
	       keys %simple) {
    $count = $simple{$key};
    $simple_tokens += $count;
    $simple_types++;
    die "couldn't find $key in true lexicon\n" unless exists $true_lex{$key};
    printf "%-15s %4d %4d\n", $key, $count, $true_lex{$key} if $verbose > 1;
  }
  $types[1] = $simple_types; #1-word collocations
  $tokens[1] = $simple_tokens;
  #now print complex words
  printf "\n%-15s %4s  %-10s %-10s\n", "Complex:","Seg", "subwds","True subwds" if $verbose > 1;
  my %no_spaces;
  for my $key (reverse sort {$complex{$a} <=> $complex{$b}}
	       keys %complex) {
    $complex_tokens += $complex{$key};
    # some compounds appear in true lexicon both with and without
    #spaces.  For type counts, count as complex only if compound
    #isn't in true lexicon (some words are inconsistent compounds).
    my $temp = $key;
    $temp =~ s/ //g;
    $no_spaces{$temp}++;
    $complex_types++ unless exists $true_lex{$temp};
    my @words = split / /, $key;
    $types[$#words + 1]++;
    $tokens[$#words + 1] += $complex{$key};
    my $seg_counts = "";
    my $true_counts = "";
    for my $word (@words) {
      die "couldn't find $word (inside $key) in true lexicon\n" unless exists $true_lex{$word};
      $true_counts .= "/$true_lex{$word}";
      if (exists($simple{$word})) {
	$seg_counts .= "/$simple{$word}";
      }
      else {
	$seg_counts .= "/0";
      }
    }
    printf "%-15s %4d  %-10s %-10s\n", $key, $complex{$key}, "S$seg_counts", "T$true_counts" if $verbose > 1;
  }
  my $nitems = $simple_types + $complex_types + $incorrect_types;
  my $ntokens = $simple_tokens + $complex_tokens + $placement_tokens + $incorrect_tokens + $complex_placement_tokens;
  print "\n";
  print "Collocations found:\n";
  print "\t\tTypes\t\tTokens\n";
  for my $i (1..$#types) {
    if ($types[$i]) {
      print_single("$i-word:\t", $types[$i], $tokens[$i], $nitems, $ntokens);
    }
  }
  print "-------------------------------------------------\n";
  print_single(">1-word:", $complex_types, $complex_tokens, $nitems, $ntokens);
  print "\n";
  print_single("Placement err:", $placement_types, $placement_tokens, $nitems, $ntokens);
  print_single("Coll place err:", $complex_placement_types, $complex_placement_tokens, $nitems, $ntokens);
  print_single("Incorrect:", $incorrect_types, $incorrect_tokens, $nitems, $ntokens);
  print "-------------------------------------------------\n";
  print_single("Total:\t", $nitems, $ntokens, $nitems, $ntokens);
}

sub print_single {
  my ($label, $types, $tokens, $total_types, $total_tokens) = @_;
  printf "$label\t%d (%1.1f%%)\t%d (%1.1f%%)\n",
    $types, 100.0*$types/$total_types,
      $tokens, 100.0*$tokens/$total_tokens;
}

########################################
#functions for debugging follow.


sub common_elements {
  my ($first, $second) = @_;
  my %return;
  for my $key (keys %$first) {
    $return{$key}++ if exists $$second{$key};
  }
  return [keys %return];
}

sub distinct_elements {
  my ($first) = @_;
  my %return;
  my %seen;
  for my $key (keys %$first) {
    my $original = $key;
    $key =~ s/ //g;
    if (exists $seen{$key}) {
      $return{$original}= $seen{$key};
    } else {
      $seen{$key} = $original;
    }
  }
  return {%return};
}

sub print_list {
  my ($list, $delimiter, $file) = @_;
  $delimiter = " " unless $delimiter;
  $file = \*STDOUT unless $file;
  for my $item (@$list) {
    print $file "$item$delimiter";
  }
  print $file "\n" unless $delimiter eq "\n";
}



sub print_hash {
my ($hash, $delimiter, $file) = @_;
$delimiter = ", " unless $delimiter;
$file = \*STDOUT unless $file;
  my @ks = sort keys %$hash;
  for my $k1 (@ks) {
    print $file "$k1 $$hash{$k1}$delimiter";
        }
    print $file "\n" unless $delimiter eq "\n";
  }

